[package]
name = "regex"
version = "0.2.2"  #:version
authors = ["The Rust Project Developers"]
license = "MIT/Apache-2.0"
readme = "README.md"
repository = "https://github.com/rust-lang/regex"
documentation = "https://doc.rust-lang.org/regex"
homepage = "https://github.com/rust-lang/regex"
description = """
An implementation of regular expressions for Rust. This implementation uses
finite automata and guarantees linear time matching on all inputs.
"""
categories = ["text-processing"]

[badges]
travis-ci = { repository = "rust-lang/regex" }
appveyor = { repository = "rust-lang-libs/regex" }

[dependencies]
# For very fast prefix literal matching.
aho-corasick = { version = "0.6.0", default-features = false }
# For skipping along search text quickly when a leading byte is known.
memchr = { version = "2.0.0", default-features = false }
# For managing regex caches quickly across multiple threads.
thread_local = "0.3.2"
# For parsing regular expressions.
regex-syntax = { path = "regex-syntax", version = "0.4.1" }
# For accelerating text search.
simd = { version = "0.1.1", optional = true }
# For compiling UTF-8 decoding into automata.
utf8-ranges = "1.0.0"

[dev-dependencies]
# For examples.
lazy_static = "0.2.2"
# For property based tests.
quickcheck = { version = "0.4.1", default-features = false }
# For generating random test data.
rand = "0.3.15"

[features]
default = ["use_std"]
# Enable to use the unstable pattern traits defined in std.
pattern = []
# Enable to use simd acceleration.
simd-accel = ["simd"]
# Allow compilation of dependencies without std
use_std = ["aho-corasick/use_std", "memchr/use_std"]

[lib]
# There are no benchmarks in the library code itself
bench = false

# Run the test suite on the default behavior of Regex::new.
# This includes a mish mash of NFAs and DFAs, which are chosen automatically
# based on the regex. We test both of the NFA implementations by forcing their
# usage with the test definitions below. (We can't test the DFA implementations
# in the same way since they can't be used for every regex tested.)
[[test]]
path = "tests/test_default.rs"
name = "default"

# The same as the default tests, but run on bytes::Regex.
[[test]]
path = "tests/test_default_bytes.rs"
name = "default-bytes"

# Run the test suite on the NFA algorithm over Unicode codepoints.
[[test]]
path = "tests/test_nfa.rs"
name = "nfa"

# Run the test suite on the NFA algorithm over bytes that match UTF-8 only.
[[test]]
path = "tests/test_nfa_utf8bytes.rs"
name = "nfa-utf8bytes"

# Run the test suite on the NFA algorithm over arbitrary bytes.
[[test]]
path = "tests/test_nfa_bytes.rs"
name = "nfa-bytes"

# Run the test suite on the backtracking engine over Unicode codepoints.
[[test]]
path = "tests/test_backtrack.rs"
name = "backtrack"

# Run the test suite on the backtracking engine over bytes that match UTF-8
# only.
[[test]]
path = "tests/test_backtrack_utf8bytes.rs"
name = "backtrack-utf8bytes"

# Run the test suite on the backtracking engine over arbitrary bytes.
[[test]]
path = "tests/test_backtrack_bytes.rs"
name = "backtrack-bytes"

[profile.test]
debug = true
