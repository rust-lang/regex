name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
  - cron: '00 01 * * *'

# The section is needed to drop write-all permissions that are granted on
# `schedule` event. By specifying any permission explicitly all others are set
# to none. By using the principle of least privilege the damage a compromised
# workflow can do (because of an injection or compromised third party tool or
# action) is restricted. Currently the worklow doesn't need any additional
# permission except for pulling the code. Adding labels to issues, commenting
# on pull-requests, etc. may need additional permissions:
#
# Syntax for this section:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
#
# Reference for how to assign permissions on a job-by-job basis:
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
#
# Reference for available permissions that we can enable if needed:
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # to fetch code (actions/checkout)
  contents: read

jobs:
  # This job does our basic build+test for supported platforms.
  test:
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, TARGET is set to `--target matrix.target`.
      # Note that we only use cross on Linux, so setting a target on a
      # different OS will just use normal cargo.
      TARGET:
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: stable
          os: ubuntu-latest
          rust: stable
        - build: stable-32
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
        - build: stable-mips
          os: ubuntu-latest
          rust: stable
          target: mips64-unknown-linux-gnuabi64
        - build: beta
          os: ubuntu-latest
          rust: beta
        - build: nightly
          os: ubuntu-latest
          rust: nightly
        - build: macos
          os: macos-latest
          rust: stable
        - build: win-msvc
          os: windows-latest
          rust: stable
        - build: win-gnu
          os: windows-latest
          rust: stable-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - name: Install and configure Cross
      if: matrix.os == 'ubuntu-latest' && matrix.target != ''
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz

        # We used to install 'cross' from master, but it kept failing. So now
        # we build from a known-good version until 'cross' becomes more stable
        # or we find an alternative. Notably, between v0.2.1 and current
        # master (2022-06-14), the number of Cross's dependencies has doubled.
        # cargo install --bins --git https://github.com/rust-embedded/cross --tag v0.2.1
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET=--target ${{ matrix.target }}" >> $GITHUB_ENV
    - name: Show command used for Cargo
      run: |
        echo "cargo command is: $CARGO"
        echo "target flag is: $TARGET"
    - name: Show CPU info for debugging
      if: matrix.os == 'ubuntu-latest'
      run: lscpu
    - name: Basic build
      run: ${{ env.CARGO }} build --verbose $TARGET
    - name: Build docs
      run: ${{ env.CARGO }} doc --verbose $TARGET
    - name: Run subset of tests
      run: ${{ env.CARGO }} test --verbose --test integration $TARGET
    - name: Build regex-syntax docs
      run: ${{ env.CARGO }} doc --verbose --manifest-path regex-syntax/Cargo.toml $TARGET
    - name: Run subset of regex-syntax tests
      run: ${{ env.CARGO }} test --verbose --manifest-path regex-syntax/Cargo.toml $TARGET
    - name: Build regex-automata docs
      run: ${{ env.CARGO }} doc --verbose --manifest-path regex-automata/Cargo.toml $TARGET
    - name: Run subset of regex-automata tests
      if: matrix.build != 'win-gnu'  # Just horrifically slow.
      run: ${{ env.CARGO }} test --verbose --manifest-path regex-automata/Cargo.toml $TARGET
    - name: Run regex-lite tests
      run: ${{ env.CARGO }} test --verbose --manifest-path regex-lite/Cargo.toml $TARGET

  # This job runs a stripped down version of CI to test the MSRV. The specific
  # reason for doing this is that the regex crate's dev-dependencies tend to
  # evolve more quickly. There isn't as tight of a control on them because,
  # well, they're only used in tests and their MSRV doesn't matter as much.
  #
  # It is a bit unfortunate that our MSRV test is basically just "build it"
  # and pass if that works. But usually MSRV is broken by compilation problems
  # and not runtime behavior. So this is in practice good enough.
  msrv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: 1.60.0
    - name: Basic build
      run: cargo build --verbose
    - name: Build docs
      run: cargo doc --verbose

  # This job runs many more tests for the regex crate proper. Basically,
  # it repeats the same test suite for a bunch of different crate feature
  # combinations. There are so many features that exhaustive testing isn't
  # really possible, but we cover as much as is feasible.
  #
  # If there is a feature combo that should be tested but isn't, you'll want to
  # add it to the appropriate 'test' script in this repo.
  testfull-regex:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    - name: Run full test suite
      run: ./test

  # Same as above, but for regex-automata, which has even more crate features!
  testfull-regex-automata:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    - name: Run full test suite
      run: ./regex-automata/test

  # Same as above, but for regex-syntax.
  testfull-regex-syntax:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    - name: Run full test suite
      run: ./regex-syntax/test

  # Same as above, but for regex-capi.
  testfull-regex-capi:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    - name: Run full test suite
      run: ./regex-capi/test

  # Runs miri on regex-automata's test suite. This doesn't quite cover
  # everything. Many tests are disabled when building with miri because of
  # how slow miri runs. But it still gives us decent coverage.
  miri-regex-automata:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        # We use nightly here so that we can use miri I guess?
        # It caught me by surprise that miri seems to only be
        # available on nightly.
        toolchain: nightly
        components: miri
    - name: Run full test suite
      run: cargo miri test --manifest-path regex-automata/Cargo.toml

  # Tests that everything is formatted correctly.
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
